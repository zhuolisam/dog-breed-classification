import { useRef, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { inference } from '../utils/predict';

export default function Home() {
  const inputRef = useRef<HTMLInputElement>(null);
  const imageRef = useRef<HTMLImageElement>(null);
  const [image, setImage] = useState<string | null>(null);
  const [result, setResult] = useState<{
    breed: string;
    probability: number | string;
    time: number | string;
  }>({
    breed: '',
    probability: '',
    time: '',
  });
  const [afterPredict, setAfterPredict] = useState('before');

  const accept = 'image/*';

  function clsx(...classes: string[]) {
    return classes.filter(Boolean).join(' ');
  }

  return (
    <div>
      <Head>
        <title>Dog Breed Classification App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>

      <div className="flex flex-col justify-center items-start max-w-3xl px-4 py-8 mx-auto 2xl:max-w-5xl">
        {/* header */}
        <div className="flex flex-col md:flex-row w-full mb-10">
          <FootprintIcon />
          <div className="flex flex-col">
            <h2 className="">Dog Breeds Classification App</h2>
            <h4 className="">A EffNetB0 feature extractor model.</h4>
          </div>
        </div>
        {/* header */}

        {/* two parts */}
        <div className="w-full grid grid-cols-1 gap-6 md:grid-cols-2">
          <div className="flex flex-col">
            {/* image part */}
            <button
              className={clsx(
                'w-full aspect-video relative overflow-hidden rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition group focus:outline-none',
                image
                  ? 'hover:opacity-90 disabled:hover:opacity-100'
                  : 'border-2 border-dashed hover:border-gray-400 focus:border-gray-400 disabled:hover:border-gray-200'
              )}
              onClick={() => {
                if (inputRef.current) {
                  inputRef.current.click();
                }
              }}
            >
              {image ? (
                <div className="relative w-full h-full">
                  <Image
                    src={image}
                    alt="image"
                    fill
                    className="object-contain"
                    ref={imageRef}
                  />
                </div>
              ) : null}

              <div className="flex items-center justify-center">
                {!image ? (
                  <div className="flex flex-col items-center space-y-2">
                    <div className="shrink-0 rounded-full p-2 bg-gray-200 group-hover:scale-110 group-focus:scale-110 transition">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        strokeWidth="1.5"
                        stroke="currentColor"
                        className="w-4 h-4 text-gray-500 transition"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M4.5 10.5L12 3m0 0l7.5 7.5M12 3v18"
                        />
                      </svg>
                    </div>
                  </div>
                ) : null}
                <input
                  ref={inputRef}
                  type="file"
                  accept={accept}
                  className="hidden"
                  onChange={(e) => {
                    if (!e.target.files) return;
                    // @ts-ignore
                    let image = e.target.files[0];
                    let url;
                    try {
                      url = URL.createObjectURL(image);
                      setImage(url);
                      setAfterPredict('before');
                    } catch (error) {
                      console.log(error);
                    }
                  }}
                />
              </div>
            </button>

            <button
              onClick={() => {
                if (afterPredict == 'after') {
                  setAfterPredict('before');
                  setImage(null);
                  setResult({
                    breed: '',
                    probability: '',
                    time: '',
                  });
                } else {
                  setAfterPredict('during');
                  (async () => {
                    const [predictions, probs, inferenceTime] = await inference(
                      // @ts-ignore
                      imageRef.current
                    );
                    setResult({
                      breed: predictions,
                      probability: probs,
                      time: inferenceTime,
                    });
                  })();
                  setAfterPredict('after');
                }
              }}
              className="w-full px-6 py-4 mt-10 font-bold text-white bg-yellow-700 border rounded-md hover:bg-amber-800 disabled:bg-gray-200 transition"
              disabled={image == null || afterPredict == 'during'}
            >
              {afterPredict == 'after' ? 'RESET' : 'PREDICT'}
            </button>
          </div>

          <div className="border rounded-md divide-y px-4 py-4 h-full flex flex-col w-full mt-10 md:mt-0">
            <div className="grow inline-flex flex-col">
              <h4 className="font-bold">Prediction:</h4>
              <span className="text-center mx-auto">
                {afterPredict == 'after' ? (
                  result.breed
                ) : afterPredict == 'during' ? (
                  <Loader />
                ) : (
                  ''
                )}
              </span>
            </div>
            <div className="grow pt-4 inline-flex flex-col">
              <h4 className="font-bold">Probability:</h4>
              <span className="text-center mx-auto">
                {afterPredict == 'after' ? (
                  result.probability
                ) : afterPredict == 'during' ? (
                  <Loader />
                ) : (
                  ''
                )}
              </span>
            </div>
            <div className="grow pt-4 inline-flex flex-col">
              <h4 className="font-bold">Time taken(s):</h4>
              <span className="text-center mx-auto">
                {afterPredict == 'after' ? (
                  result.time
                ) : afterPredict == 'during' ? (
                  <Loader />
                ) : (
                  ''
                )}
              </span>
            </div>
            {/* <a
            href="https://github.com/ziqinyeow/90-animal-classification"
            target="_blank"
            rel="noopener noreferrer"
            className="px-6 py-4 mt-10 ml-4 font-bold text-white bg-gray-700 border rounded-md hover:bg-black disabled:bg-gray-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              width="24"
              height="24"
            >
              <path fill="none" d="M0 0h24v24H0z" />
              <path
                fill="white"
                d="M12 2C6.475 2 2 6.475 2 12a9.994 9.994 0 0 0 6.838 9.488c.5.087.687-.213.687-.476 0-.237-.013-1.024-.013-1.862-2.512.463-3.162-.612-3.362-1.175-.113-.288-.6-1.175-1.025-1.413-.35-.187-.85-.65-.013-.662.788-.013 1.35.725 1.538 1.025.9 1.512 2.338 1.087 2.912.825.088-.65.35-1.087.638-1.337-2.225-.25-4.55-1.113-4.55-4.938 0-1.088.387-1.987 1.025-2.688-.1-.25-.45-1.275.1-2.65 0 0 .837-.262 2.75 1.026a9.28 9.28 0 0 1 2.5-.338c.85 0 1.7.112 2.5.337 1.912-1.3 2.75-1.024 2.75-1.024.55 1.375.2 2.4.1 2.65.637.7 1.025 1.587 1.025 2.687 0 3.838-2.337 4.688-4.562 4.938.362.312.675.912.675 1.85 0 1.337-.013 2.412-.013 2.75 0 .262.188.574.688.474A10.016 10.016 0 0 0 22 12c0-5.525-4.475-10-10-10z"
              />
            </svg>
          </a> */}
          </div>
        </div>
      </div>
    </div>
  );
}

export const FootprintIcon = () => {
  return (
    <svg
      width={40}
      height={40}
      className="inline-block transition-transform hover:rotate-[20deg] amber-900 md:mr-4 md:mt-2"
      viewBox="0 0 40 40"
      fill="#a16207"
    >
      <g transform="matrix(1.07541,0,0,1.1001,-1.05651,-0.978215)">
        <path d="M13.319,4.13C13.319,4.13 10.313,4.08 9.501,9.535C9.133,13.546 12.568,15.516 14.12,15.497C15.556,15.495 17.638,14.151 17.486,9.765C17.334,5.38 14.98,4.15 13.319,4.13" />
      </g>
      <path d="M3.12,15.575C2.626,16.02 0.637,18.024 3.508,22.915C6.379,27.806 8.628,23.888 8.923,23.455C9.218,23.021 11.41,20.306 8.664,16.924C5.918,13.543 3.12,15.575 3.12,15.575Z" />
      <g transform="matrix(1.00722,0,0,0.981856,-0.205441,0.281328)">
        <path d="M24.03,4.13C22.048,4.309 20.472,5.325 20.922,9.814C21.373,14.304 24.4,15.613 25.402,15.499C26.404,15.385 28.84,12.521 28.427,9.814C28.013,7.107 26.837,4.296 24.03,4.13Z" />
      </g>
      <path d="M32.114,11.35C32.114,11.35 29.196,13.155 30.864,16.589C32.532,20.023 34.677,19.25 36,18.588C37.322,17.927 38.02,14.778 35.931,12.665C33.843,10.551 32.114,11.35 32.114,11.35Z" />
      <path d="M19.212,17.136C19.212,17.136 12.651,19.306 12.84,25.174C12.888,28.022 10.569,28.548 11.073,32.567C11.727,34.322 12.649,36.92 15.89,36.85C19.131,36.781 19.603,34.354 23.377,32.97C27.151,31.586 31.009,33.828 33.802,31.213C36.596,28.598 35.188,24.468 31.876,22.731C28.564,20.995 24.793,16.327 19.212,17.136Z" />
    </svg>
  );
};

export const Loader = () => {
  return (
    <div role="status">
      <svg
        aria-hidden="true"
        className="w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-slate-600"
        viewBox="0 0 100 101"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
          fill="currentColor"
        />
        <path
          d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
          fill="currentFill"
        />
      </svg>
      <span className="sr-only">Loading...</span>
    </div>
  );
};
